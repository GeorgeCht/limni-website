/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    rooms: Room;
    experiences: Experience;
    questions: Question;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    home: Home;
    about: About;
    contact: Contact;
    roomsPage: RoomsPage;
    experiencesPage: ExperiencesPage;
    questionsPage: QuestionsPage;
    shared: Shared;
  };
  locale: 'en' | 'el';
  user: User & {
    collection: 'users';
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rooms".
 */
export interface Room {
  id: string;
  name: string;
  roomEssentials: {
    code: string;
    url: string;
  };
  roomDetails: {
    visitors: number;
    area: string;
    beds: number;
  };
  category: 'superior' | 'standard' | 'deluxe';
  amenities: ('tv' | 'wifi' | 'air_conditioning' | 'pool')[];
  midSection: {
    title: string;
    label: string;
    paragraph: string;
    cta: {
      label: string;
      url: string;
      id?: string | null;
      blockName?: string | null;
      blockType: 'CallToAction';
    }[];
    backImage: string | Media;
    frontImage: string | Media;
  };
  recommendedExperiences: {
    header: string;
    subtitle: string;
    description: string;
    paragraph: string;
    experiences?:
      | {
          experience: string | Experience;
          video?: (string | null) | Media;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
    blockName?: string | null;
    blockType: 'SelectedExperiences';
  }[];
  prefooter: {
    block: {
      subheader: string;
      header: string;
      line1: string;
      line2: string;
      url: string;
      background: string | Media;
      id?: string | null;
      blockName?: string | null;
      blockType: 'PreFooter';
    }[];
  };
  media: {
    cover: string | Media;
    images?: (string | Media)[] | null;
  };
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "experiences".
 */
export interface Experience {
  id: string;
  name: string;
  description?: string | null;
  title?: string | null;
  cta: {
    label: string;
    url: string;
    id?: string | null;
    blockName?: string | null;
    blockType: 'CallToAction';
  }[];
  midSection: {
    title?: string | null;
    paragraph?: string | null;
    includePolicy?: boolean | null;
    cta: {
      label: string;
      url: string;
      id?: string | null;
      blockName?: string | null;
      blockType: 'CallToAction';
    }[];
    frontImage?: (string | null) | Media;
    backImage?: (string | null) | Media;
  };
  breakSection: {
    title: string;
    paragraph: string;
    cta: {
      label: string;
      url: string;
      id?: string | null;
      blockName?: string | null;
      blockType: 'CallToAction';
    }[];
    smallImage?: (string | null) | Media;
    bigImage?: (string | null) | Media;
  };
  availability: 'summer' | 'winter' | 'spring' | 'fall' | 'all';
  Media: {
    images?: (string | Media)[] | null;
    cover: string | Media;
    frontDisplay: string | Media;
  };
  recommendedExperiences: {
    header: string;
    subtitle: string;
    description: string;
    paragraph: string;
    experiences?:
      | {
          experience: string | Experience;
          video?: (string | null) | Media;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
    blockName?: string | null;
    blockType: 'SelectedExperiences';
  }[];
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questions".
 */
export interface Question {
  id: string;
  question: string;
  answer: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home".
 */
export interface Home {
  id: string;
  hero: {
    header: string;
    subtitle: string;
    cta?:
      | {
          label: string;
          url: string;
          id?: string | null;
          blockName?: string | null;
          blockType: 'CallToAction';
        }[]
      | null;
    paragraph: string;
    paragraphCta?:
      | {
          label: string;
          url: string;
          id?: string | null;
          blockName?: string | null;
          blockType: 'CallToAction';
        }[]
      | null;
    image: string | Media;
  };
  second: {
    header: string;
    ctaLabel: string;
    ctaUrl: string;
    image: string | Media;
  };
  third: {
    title: string;
    paragraph: string;
  };
  fourth?: {
    rooms?:
      | {
          room: string | Room;
          image: string | Media;
          id?: string | null;
        }[]
      | null;
  };
  fifth: {
    selectedExperiences: {
      header: string;
      subtitle: string;
      description: string;
      paragraph: string;
      experiences?:
        | {
            experience: string | Experience;
            video?: (string | null) | Media;
            id?: string | null;
          }[]
        | null;
      id?: string | null;
      blockName?: string | null;
      blockType: 'SelectedExperiences';
    }[];
  };
  sixth: {
    prefooter: {
      subheader: string;
      header: string;
      line1: string;
      line2: string;
      url: string;
      background: string | Media;
      id?: string | null;
      blockName?: string | null;
      blockType: 'PreFooter';
    }[];
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about".
 */
export interface About {
  id: string;
  introSection: {
    title: string;
    paragraph: string;
    cta: {
      label: string;
      url: string;
      id?: string | null;
      blockName?: string | null;
      blockType: 'CallToAction';
    }[];
  };
  secondSection: {
    title: string;
    bulletPoints: {
      text: string;
      id?: string | null;
    }[];
    sliderImages?: (string | Media)[] | null;
  };
  breakSection: {
    title: string;
    paragraph: string;
    cta: {
      label: string;
      url: string;
      id?: string | null;
      blockName?: string | null;
      blockType: 'CallToAction';
    }[];
    smallImage?: (string | null) | Media;
    bigImage?: (string | null) | Media;
  };
  recommendedExperiences: {
    header: string;
    subtitle: string;
    description: string;
    paragraph: string;
    experiences?:
      | {
          experience: string | Experience;
          video?: (string | null) | Media;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
    blockName?: string | null;
    blockType: 'SelectedExperiences';
  }[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact".
 */
export interface Contact {
  id: string;
  title: string;
  paragraph: string;
  information: {
    phoneNumber: string;
    email: string;
  };
  location: {
    address1: string;
    address2: string;
    mapsUrl: string;
  };
  socialMedia?:
    | {
        label: string;
        url: string;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "roomsPage".
 */
export interface RoomsPage {
  id: string;
  intro: {
    title: string;
    paragraph: string;
    cta: {
      label: string;
      url: string;
      id?: string | null;
      blockName?: string | null;
      blockType: 'CallToAction';
    }[];
  };
  titles: {
    superiorRooms: string;
    standardRooms: string;
    deluxeRooms: string;
  };
  recommendedExperiences: {
    header: string;
    subtitle: string;
    description: string;
    paragraph: string;
    experiences?:
      | {
          experience: string | Experience;
          video?: (string | null) | Media;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
    blockName?: string | null;
    blockType: 'SelectedExperiences';
  }[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "experiencesPage".
 */
export interface ExperiencesPage {
  id: string;
  headerBig: string;
  headerSmall: string;
  label: string;
  paragraph: string;
  headerBelow: string;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questionsPage".
 */
export interface QuestionsPage {
  id: string;
  title: string;
  label: string;
  paragraph: string;
  cta: {
    label: string;
    url: string;
    id?: string | null;
    blockName?: string | null;
    blockType: 'CallToAction';
  }[];
  roomCategories: {
    title: string;
    paragraph: string;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shared".
 */
export interface Shared {
  id: string;
  header: {
    mainButton: {
      labelLg: string;
      labelSm: string;
      url: string;
    };
    roomsCta: {
      title: string;
      label: string;
      url: string;
    };
    bookingCta: {
      title: string;
      label: string;
      url: string;
    };
  };
  footer: {
    newsletter: {
      header: string;
      inputPlaceholder: string;
    };
    listedLinks?: {
      links?:
        | {
            label: string;
            url: string;
            id?: string | null;
            blockName?: string | null;
            blockType: 'CallToAction';
          }[]
        | null;
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}