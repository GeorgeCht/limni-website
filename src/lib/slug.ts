import { deepMerge } from '@/lib/utils'

import type { Field, FieldHook } from 'payload'

/**
 * Converts a string to kebab-case
 *
 * @param {string} val - The input string to convert
 * @returns The kebab-cased string
 */
const kebabCase = (val: string): string =>
  val
    .replace(/ /g, '-')
    .replace(/[^\w-]+/g, '')
    .toLowerCase()

/**
 * Formats a slug field
 *
 * @param {string} fallback - The field to use as a fallback if the slug field is empty
 * @returns {FieldHook} The formatted slug field
 */
const formatSlug =
  (fallback: string): FieldHook =>
  ({ data, operation, originalDoc, value }) => {
    if (typeof value === 'string') {
      return kebabCase(value)
    }

    if (operation === 'create') {
      const fallbackData = data?.[fallback] || originalDoc?.[fallback]

      if (fallbackData && typeof fallbackData === 'string') {
        return kebabCase(fallbackData)
      }
    }

    return value
  }

type Slug = (fieldToUse?: string, overrides?: Partial<Field>) => Field

/**
 * Used to append a slug field to a Payload collection
 *
 * @param {Partial<Field>} overrides Overrides for the slug field
 * @returns {Slug} The slug field
 */
export const slugField: Slug = (fieldToUse = 'title', overrides = {}) =>
  deepMerge<Field, Partial<Field>>(
    {
      name: 'slug',
      admin: {
        position: 'sidebar',
        description:
          'The slug of the document. Autogenerated from the title field.',
      },
      hooks: {
        beforeValidate: [formatSlug(fieldToUse)],
      },
      index: true,
      label: 'Slug',
      type: 'text',
    },
    overrides,
  )
